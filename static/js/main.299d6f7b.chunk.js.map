{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","reverseField","setReverseField","preparedGoods","sortBy","allGoods","sortByAlphabet","sort","sortByLength","firstGood","nextGood","length","prepareGoods","reverse","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,0BAAAA,E,sBAAAA,E,YAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KA2BA,IAAMC,EAhBN,SAAsBC,GACpB,IAAMC,EAAQ,UAAOT,GAErB,OAAIQ,IAAWT,EAASW,eACfD,EAASE,OAGdH,IAAWT,EAASa,aACfH,EAASE,MACd,SAACE,EAAWC,GAAZ,OAAyBD,EAAUE,OAASD,EAASC,UAIlDN,EAGaO,CAAab,GAMnC,OAJIE,GACFE,EAAcU,UAId,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYjB,IAAcJ,EAASW,iBACvCW,QAAS,kBAAMjB,EAAaL,EAASW,iBAJvC,iCASA,wBACES,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYjB,IAAcJ,EAASa,eACvCS,QAAS,kBAAMjB,EAAaL,EAASa,eAJvC,4BASA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,YAAaf,IACjBgB,QAxDe,WACrBf,GAAiBD,IAmDb,sBASEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA7DM,WACdjB,EAAa,IACbE,GAAgB,IAwDV,sBAUJ,6BACGC,EAAce,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCnGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.299d6f7b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  sortByAlphabet = 'alphabet',\n  sortByLength = 'length',\n  default = '',\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n\n  const onClickReverse = () => {\n    setReverseField(!reverseField);\n  };\n\n  const onReset = () => {\n    setSortField('');\n    setReverseField(false);\n  };\n\n  function prepareGoods(sortBy: string) {\n    const allGoods = [...goodsFromServer];\n\n    if (sortBy === SortType.sortByAlphabet) {\n      return allGoods.sort();\n    }\n\n    if (sortBy === SortType.sortByLength) {\n      return allGoods.sort(\n        (firstGood, nextGood) => firstGood.length - nextGood.length,\n      );\n    }\n\n    return allGoods;\n  }\n\n  const preparedGoods = prepareGoods(sortField);\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortType.sortByAlphabet })}\n          onClick={() => setSortField(SortType.sortByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SortType.sortByLength })}\n          onClick={() => setSortField(SortType.sortByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !reverseField })}\n          onClick={onClickReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}